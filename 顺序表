# Tc-1
#include <iostream>

using namespace std;
const int defaultSize=1000;
typedef int T;
class Seqlist
{
protected:
    T *data;
    int maxsize;
    int last;
public:
    Seqlist(int sz=defaultSize);
    //Seqlist(Seqlist& L);
    ~Seqlist();
    void Setdata(int n,int value)
    {
        data[n] = value;
        last++;
    }

    void outdata()
    {
        for(int i=0; i<last+1; i++)
        {
            cout<<data[i]<<" ";
        }
        cout<<endl;
    }
    void Sortupdata();           //升序
    void Sortdedata();           //降序
    int Search(int &x)const;    //搜索x在表中的位置
    bool Insert(int x,int i);     //插入
    bool Remove(int i,T& x);    //删除
    void Combineseq( Seqlist& y);   //合并两个顺序表
    int length()
    {
        return last+1;
    }

};
Seqlist::Seqlist(int sz)
{
    maxsize = sz;
    data = new T[maxsize];
    last = -1;
}
void Seqlist::Sortupdata()
{
    int temp;
    for(int i=0; i<last+1; i++)
    {
        for(int j=last; j>i; j--)
            if(data[j-1]<data[j])
            {
                temp=data[j-1];
                data[j-1]=data[j];
                data[j]=temp;
            }
    }
}
void Seqlist::Sortdedata()
{
    int temp;
    for(int i=0; i<last+1; i++)
    {
        for(int j=last; j>i; j--)
            if(data[j]<data[j-1])
            {

                temp=data[j];
                data[j]=data[j-1];
                data[j-1]=temp;
            }
    }
}
bool Seqlist::Insert(int x,int i)
{
    if(last==maxsize-1)
    {
        return false;
    }

    if(i<0||i>last+1)
    {
        return false;
    }
    for(int j= last+1; i<=j; j--)
    {
        data[j]=data[j-1];
    }
    data[i-1]=x;
    last++;
    return true;
}
bool Seqlist::Remove(int i, T &x)
{
    if(last==-1)return false;
    if(i<1||i>last+1)return false;
    x = data[i-1];
    for(int j=i; j<=last; j++)
    {
        data[j-1] = data[j];
    }
    last--;
    return true;
}
int Seqlist::Search(int &x)const
{
    for(int i=0; i<=last; i++)
    {
        if(data[i]==x)
        {
            cout<<i+1<<endl;
            return i+1;
        }
    }
    cout<<"Not found"<<endl;
    return -1;
}
void Seqlist::Combineseq(Seqlist& y)
{

    int q = last+1;
    for(int i=0; i<y.last+1; i++)
    {
        data[i+q]=y.data[i];
        last++;
    }

}
Seqlist::~Seqlist()
{
    delete[] data;
}
int main()
{
    Seqlist L;
    int temp1,n1;
    cin>>n1;
    for(int i=0; i<n1; i++)
    {
        cin>>temp1;
        L.Setdata(i,temp1);
    }
    int h, j;
    cin>>h>>j;
    L.Insert(h,j);
    L.outdata();
    int y,k;
    cin>>y;
    L.Remove(y,k);
    L.outdata();
    L.Sortdedata();
    L.outdata();
    int x;
    cin>>x;
    L.Search(x);
    Seqlist M;
    int temp2, n2;
    cin>>n2;
    for(int i=0; i<n2; i++)
    {
        cin>>temp2;
        M.Setdata(i,temp2);
    }
    L.Combineseq(M);
    L.Sortdedata();
    L.outdata();



    return 0;
}
